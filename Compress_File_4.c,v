head	1.15;
access;
symbols;
locks
	root:1.15; strict;
comment	@ * @;


1.15
date	2021.03.29.10.25.02;	author root;	state Exp;
branches;
next	1.14;

1.14
date	2021.03.29.08.03.22;	author root;	state Exp;
branches;
next	1.13;

1.13
date	2021.03.29.07.58.10;	author root;	state Exp;
branches;
next	1.12;

1.12
date	2021.03.28.22.28.40;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2021.03.28.22.24.38;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2021.03.28.22.18.44;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2021.03.28.22.02.24;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2021.03.28.22.01.16;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2021.03.28.21.58.36;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2021.03.28.21.44.08;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2021.03.25.06.09.57;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2021.03.25.04.46.35;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2021.03.25.04.04.46;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2021.03.25.03.32.46;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2021.03.25.03.23.57;	author root;	state Exp;
branches;
next	;


desc
@@


1.15
log
@*** empty log message ***
@
text
@#include "headers.h"
#include "declaretions.h"

void* Compress_File_4(void* arg)
{
     ds_unique *ds_u;
     char byte;
     unsigned char ch;
     int ret, *index, c_fd, file_lenght;
     ds_return_new_ch ds_r;
     printf("Begin:%s\n",__func__);

     ds_u = (ds_unique *)arg;  
     lseek(ds_u->fd , 0 , SEEK_SET);
     byte ^= byte;
     ds_r.ma = ds_u->ma ;

     printf("Give File Name for Encryption\n"); 
     c_fd = *(int *)(*fptr[6])((void *)"Create");

     file_lenght = lseek( ds_u->fd, 0 , SEEK_END) -1;
     lseek(ds_u->fd , 0 , SEEK_SET);

     while( file_lenght > 0)
     {
	     ret = read(ds_u->fd , &ds_r.ch , 1);
             if( ret == -1 )
             {
                   perror("read");
                   (*fptr[0])((void *)"Failure");
             
	     }
             if( /* (ds_r.ch   == '\n') ||*/ (ds_r.ch == EOF) )
                break;
             
             index = (int *)(*fptr[16])((void *)&ds_r);
             ch = (char )*index;
	     printf("ch : %c and index %d\n",ds_r.ch , ch);
	     free(index);
	     ch = ch << 4;
	     ch = ch >> 4;
             byte = ch;
 
 	     ret = write(c_fd , &byte , sizeof(byte));
 	     if( ret == -1 )
             {
                perror("write");
                Exti_Func("Failure");
             }
             --file_lenght;
     }
     close(c_fd);
     printf("End:%s\n",__func__);
   return 0;
} 
@


1.14
log
@*** empty log message ***
@
text
@d9 1
a9 1
     int ret, *index, c_fd;
d21 4
a24 1
     while(1)
d33 1
a33 1
             if( (ds_r.ch   == '\n') || (ds_r.ch == EOF) )
d50 1
a50 1

@


1.13
log
@*** empty log message ***
@
text
@d30 2
a31 2
             if(ret  == '\0' )
                 break;
a32 3
             if(ret  == EOF )
                 break;

@


1.12
log
@*** empty log message ***
@
text
@d38 1
d43 2
a44 1
             ret = write(c_fd , &byte , sizeof(byte));
@


1.11
log
@*** empty log message ***
@
text
@a37 1
             printf("Charector:- %c and index %d\n",ds_r.ch , ch);
@


1.10
log
@*** empty log message ***
@
text
@a42 1
             printf("Charector:- %c and index %d\n",ds_r.ch , ch);
@


1.9
log
@*** empty log message ***
@
text
@d7 2
a8 1
     char byte,ch;
d37 2
a38 2
             printf("Charector:- %c and index %d\n",ds_r.ch ,*index);
             ch = (unsigned char )*index;
d40 2
a41 2
	     ch <<= 4;
	     ch >>= 4;
@


1.8
log
@*** empty log message ***
@
text
@a38 1
             printf("Charector:- %c and index %d\n",ds_r.ch , ch);
d42 1
@


1.7
log
@*** empty log message ***
@
text
@d36 1
d39 1
a42 1
             printf("Charector:- %c and index %d\n",ds_r.ch , byte);
@


1.6
log
@*** empty log message ***
@
text
@d36 1
a36 1
             ch = (char )*index;
@


1.5
log
@*** empty log message ***
@
text
@d40 2
a41 1
             byte |= ch;
@


1.4
log
@*** empty log message ***
@
text
@d17 1
@


1.3
log
@*** empty log message ***
@
text
@d8 1
a8 1
     int ret,*index;
d16 3
d21 1
a21 1
	     ret = read(ds_u->fd , &ch , 1);
d28 1
a28 2
	     printf("Read charector %c",ch);
             if(ret  == 0 )
a33 1
	     ds_r.ch = ch;
d35 1
a35 1
             printf("Index: %d\n",*index); 
d37 10
d48 1
@


1.2
log
@*** empty log message ***
@
text
@d29 3
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
     int ret,index;
a17 1
	     printf("Aman , Fd %d\n", ds_u->fd);
d30 3
a32 3
             index = *(int *)((*fptr[16])((void *)&ds_r));
             printf("Index: %d\n",index); 
        
@
