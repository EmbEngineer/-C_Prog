head	1.7;
access;
symbols;
locks
	root:1.7; strict;
comment	@ * @;


1.7
date	2021.03.29.10.25.06;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2021.03.29.09.16.30;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2021.03.29.08.48.06;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2021.03.29.07.58.12;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2021.03.28.22.42.33;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2021.03.28.21.24.44;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2021.03.28.20.53.47;	author root;	state Exp;
branches;
next	;


desc
@@


1.7
log
@*** empty log message ***
@
text
@#include "headers.h"
#include "declaretions.h"

void* dCompress_File_4(void* arg)
{
     int c_fd, ret, w_fd, file_lenght;
     char ch,c_ch,d_ch;
     char *ma;
     int index;
     printf("Begin:%s\n",__func__);
     ma = (char *)arg;
     printf("Enter the File Name of Compressed(Encrypted) file for demcryption\n");
     c_fd = *(int *)(*fptr[6])((void *)"Reading");

     printf("Enter the File Name of dencrypted file\n");
     w_fd = *(int *)(*fptr[6])((void *)"Writing");

     file_lenght = lseek( c_fd, 0 , SEEK_END) -1;
     lseek(c_fd , 0 , SEEK_SET);

     while( file_lenght >= 0)
     {
           ret = read(c_fd , &ch , 1);
           if( ret == -1 )
           {
                   perror("read");
                   (*fptr[0])((void *)"Failure");
           }
           if(  /*( ch   == '\n') ||*/ (ch == EOF) )
                break;

	   c_ch = ch;
	   index = (int)c_ch;
           d_ch = *(ma+index);
           printf(" ch : %c and index %d\n", d_ch , index);

	   ret = write(w_fd, &d_ch, 1);    
           if( ret == -1 )
           {
                perror("write");
                (*fptr[0])((void*)"Failure");
           }
           --file_lenght; 
     }	   

     close(c_fd);
     close(w_fd);
     printf("End:%s\n",__func__);
   return 0;
} 
@


1.6
log
@*** empty log message ***
@
text
@d18 2
a19 2
      file_lenght = lseek( c_fd, 0 , SEEK_END) -1;
      lseek(c_fd , 0 , SEEK_SET);
d21 1
a21 1
     while( file_lenght > 0)
d29 1
a29 1
           if(/* ( ch   == '\n') ||*/ (ch == EOF) )
@


1.5
log
@*** empty log message ***
@
text
@d21 1
a21 1
     while(1)
d29 1
a29 1
           if( ( ch   == '\0') || (ch == EOF) )
a30 1

@


1.4
log
@/
@
text
@d6 1
a6 1
     int c_fd, ret, w_fd;
d18 3
d28 3
a31 5
           }
           if(ret  == '\0' )
              break;
           if(ret  == EOF )
              break;
d36 3
a38 1
           ret = write(w_fd, &d_ch, 1);    
d44 2
a45 1
      }	   
@


1.3
log
@*** empty log message ***
@
text
@a32 2
           printf("index %d and ch %c\n",index , c_ch);
//	   c_ch >>= 4;
a33 1
           printf("index %d and ch %c\n",index , c_ch);
a34 2
           printf("index %d and ch %c\n",index , d_ch);
     
@


1.2
log
@*** empty log message ***
@
text
@d33 2
a34 1
	   c_ch >>= 4;
d36 1
d38 1
a38 1
           printf("%c",d_ch);
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
     int c_fd , ret;
d12 1
a12 1
     printf("Enter the File Name of Compressed file\n");
d14 4
a17 1
     printf("FD %d\n",c_fd);
d36 12
a47 7
	   printf("dcompressed char is %c",d_ch);
     }	     
     /*     if( ret == -1 )
     {
          perror("write");
          (*fptr[0])((void*)"Failure");
     }*/
@
